import React, { Component } from "react";
import Enzyme, { shallow } from "enzyme";
import Adapter from "enzyme-adapter-react-16";
import { findByTestAttr, checkProps } from "../test/testUtils";
import ErrorBoundary from "./components/ErrorBoundary";

Enzyme.configure({ adapter: new Adapter() });

//create child component
class ComponentWithError extends Component {
  render() {
    return (
      <div>
        <input type="text" />
      </div>
    );
  }
}

/**
 * Factory function to create a ShallowWrapper for the ErrorBoundary component
 * @function setup
 * @param {object} props - Component props specific for this setup
 * @returns {ShallowWrapper}
 */
const setup = (props = {}) => {
  return shallow(
    <ErrorBoundary {...props}>
      <ComponentWithError data-test="error-component" />
    </ErrorBoundary>
  );
};
test("renders child component without crashing and showing error message", () => {
  const wrapper = setup();
  const component = findByTestAttr(wrapper, "error-component");
  const message = findByTestAttr(wrapper, "error-message");
  expect(component.length).toBe(1);
  expect(message.length).toBe(0);
});

test("displays error message on error generated by child", () => {
  const wrapper = setup();
  wrapper.setState({ hasError: true });
  const message = findByTestAttr(wrapper, "error-message");
  expect(message.text().length).not.toBe(0);
});
